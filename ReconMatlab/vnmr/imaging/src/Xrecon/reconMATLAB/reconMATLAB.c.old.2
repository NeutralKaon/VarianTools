/* reconMATLAB.c */
/*---------------------------------------------------------------------------*/
/*                                                                           */
/* reconMATLAB.c: 2D recon                                                       */
/*                                                                           */
/* Xrecon is free software: you can redistribute it and/or modify            */
/* it under the terms of the GNU General Public License as published by      */
/* the Free Software Foundation, either version 3 of the License, or         */
/* (at your option) any later version.                                       */
/*                                                                           */
/* Xrecon is distributed in the hope that it will be useful,                 */
/* but WITHOUT ANY WARRANTY; without even the implied warranty of            */
/* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the              */
/* GNU General Public License for more details.                              */
/*                                                                           */
/* You should have received a copy of the GNU General Public License         */
/* along with Xrecon. If not, see <http://www.gnu.org/licenses/>.            */
/*                                                                           */
/*---------------------------------------------------------------------------*/

#include "../Xrecon.h"
#include "hdf5.h"

void reconMATLAB(struct data *d)
{

    char sysargh[128] ={0}; 
    char command[256] = {0};
    sprintf(command, "XreconMatlab.sh %s", d->file);
    sprintf(sysargh,"echo Hello!");

    system(command);
    recon2D(d);


   hid_t       file_id, dataset_id;  /* identifiers */
   herr_t      status;
   int         i, j;
    char fname[1024];
    strcpy(fname,"/home/lab1/vnmrsys/exp1/acqfil/out.h5");

    int dim1,dim2,dim3,nr;
    int k,l;
    dim1=d->np/2; dim2=d->nv; dim3=d->endpos-d->startpos; nr=d->nr;
    int dset_data[dim1][dim2][dim3][nr];

   // Initialize the dataset. */
   //for (i = 0; i < 128; i++)
   //   for (j = 0; j < 128; j++)
   //      dset_data[i][j] = i * 128 + j + 1;

    sprintf(fname,d->file);
    int len=strlen(fname); 
    fname[len-3]='\0';
    strcat(fname,"out.h5");
    printf("Fname is %s\ndim1: %d, dim2: %d, dim3: %d, nr: %d\n",fname,dim1, dim2, dim3, nr);


   system(sysargh);
  //  Open an existing file. */
   file_id = H5Fopen(fname, H5F_ACC_RDWR, H5P_DEFAULT);
   system(sysargh); 

   // Open an existing dataset. */
   dataset_id = H5Dopen2(file_id, "/real", H5P_DEFAULT);

   // Write the dataset. */
  // status = H5Dwrite(dataset_id, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, H5P_DEFAULT, 
  //                   dset_data);

   status = H5Dread(dataset_id, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, H5P_DEFAULT, 
                    dset_data);

   // Close the dataset. */
   status = H5Dclose(dataset_id);

   // Close the file. */
   status = H5Fclose(file_id);
    system(sysargh);
    printf("\n\nDone with hdf5!\n\n");

    //Update data in d. 
    int ix=0; 
//  for (i=0;i<nr;i++) {
//    for (j=0;j<dim3;j++) {
//      for(k=0;k<dim2;k++) {
//        for (l=0;l<dim1;l++) {
//          ix=((k+0)%dim2)*dim1+(l+0)%dim1;
//          d->data[i][j][ix][0]=dset_data[i][j][ix][0];
//        }
//      }
//    }
//  }

//////////////////////////////////////////////
   /* //Below borken? 
    hid_t file_id_rm;//, dataset_id;
    hid_t dataset_id; 
    herr_t      status;

    int dim1,dim2,dim3,nr;
    char fname[1024]={'\0'}; 
    printf("Fname is %s\ndim1: %d, dim2: %d, dim3: %d, nr: %d\n",fname,dim1, dim2, dim3, nr);
    int i,j,k,l;
    dim1=d->np/2; dim2=d->nv; dim3=d->endpos-d->startpos; nr=d->nr;

    sprintf(fname,d->file);
    int len=strlen(fname); 
    fname[len-3]='\0';

    strcat(fname,"out.h5");
    strcpy(fname,"/home/lab1/vnmrsys/exp1/acqfil/out.h5");
    printf("Fname is %s\ndim1: %d, dim2: %d, dim3: %d, nr: %d\n",fname,dim1, dim2, dim3, nr);
 
    file_id_rm = H5Fopen("/home/lab1/vnmrsys/exp1/acqfil/out.h5", H5F_ACC_RDONLY, H5P_DEFAULT);
    system(sysargh);
//    sprintf(sysargh,"echo \'Data[0] is %lf\'>/tmp/arghargh\n",data[0][0][0][0]);

    double data[nr][dim1][dim2][dim3];
  
     Open an existing file. 
    system(sysargh); 
    // Open an existing dataset.
    dataset_id = H5Dopen2(file_id_rm, "/real", H5P_DEFAULT);
    system(sysargh); 
    status = H5Dread(dataset_id, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, H5P_DEFAULT, 
                               data);
    system(sysargh); 
    // Close the dataset. 
    status = H5Dclose(dataset_id);
    system(sysargh); 

    // Close the file. 
    status = H5Fclose(file_id_rm);

  // If profile flag is set then recon profiles */
  // if (d->profile) {profile1D(d);}

 //char* fname = d.file;  

}
